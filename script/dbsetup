#!/bin/sh
NAME="$(basename $0)"

function success_or_failure() {
  if [ $RETVAL -eq 0 ]; then
    echo "Success"
  else
    echo "Failure"
  fi
  echo
}

function setup_database_user() {
  psql -U postgres -c '\du chirpr' | grep chirpr > /dev/null
  if [ $? != 0 ] ; then 
    echo " - Create database user 'chirpr'"
    RETVAL=0
    psql -U postgres -q -c "create user chirpr password 'chirpr' createdb"
    RETVAL=$?
    success_or_failure
  else
    echo " - Database user 'chirpr' already exists"
    RETVAL=0
    success_or_failure
  fi
}

function remove_database_user() {
  psql -U postgres -c '\du chirpr' | grep chirpr > /dev/null
  if [ $? == 0 ] ; then 
    echo " - Remove database user 'chirpr'"
    RETVAL=0
    psql -U postgres -q -c "drop user chirpr" > /dev/null
    RETVAL=$?
    success_or_failure
  else
    echo " - No database user 'chirpr' to remove"
    RETVAL=0
    success_or_failure
  fi
}

function setup_database() {
  psql -U postgres -l | grep chirpr > /dev/null
  if [ $? != 0 ] ; then
    echo " - Create database 'chirpr'"
    RETVAL=0
    psql -U postgres -q -c "create database chirpr owner chirpr encoding 'utf8'"
    RETVAL=$?
    success_or_failure
  else
    echo " - Database 'chirpr' already exists"
    RETVAL=0
    success_or_failure
  fi
}

function remove_database() {
  psql -U postgres -l | grep chirpr > /dev/null
  if [ $? == 0 ] ; then
    echo " - Remove database 'chirpr'"
    RETVAL=0
    psql -U postgres -q -c "drop database chirpr" > /dev/null
    RETVAL=$?
    success_or_failure
  else
    echo " - No database 'chirpr' to remove"
    RETVAL=0
    success_or_failure
  fi
}

install() {
  setup_database_user
  setup_database
}

uninstall() {
  remove_database
  remove_database_user
}


case "$1" in
install)
    install
    ;;
uninstall)
    uninstall
    ;;
*)
    echo "usage: ${NAME} (install|uninstall)"
    exit 1
esac

exit $RETVAL

